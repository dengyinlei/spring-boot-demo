server:
  port: 8080
  servlet:
    context-path: /
spring:
  kafka:
    # 指定kafka server的地址，集群配多个，中间，逗号隔开
    bootstrap-servers: 47.104.216.40:9092
    producer:
      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
      retries: 0
      # 每次批量发送消息的数量,produce积累到一定数据，一次发送
      batch-size: 16384
      # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
      buffer-memory: 33554432
      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
      #可以设置的值为：all, -1, 0, 1
      acks: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      # 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
      group-id: denley
      # 手动提交
      # 这个参数指定了消费者是否自动提交消费位移，默认为true。
      # 如果需要减少重复消费或者数据丢失，你可以设置为false，然后手动提交。如果为true，
      # 你可能需要关注自动提交的时间间隔，该间隔由auto.commit.interval.ms设置。
      enable-auto-commit: false
      #周期性自动提交的间隔，单位毫秒
      auto-commit-interval: 2000 #默认值：5000
      # 批量一次最大拉取数据量
      max-poll-records: 5
      # 配置消费者消息offset是否自动重置(消费者重连会能够接收最开始的消息)
      # smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
      # 这个参数指定了当消费者第一次读取分区或者无offset时拉取那个位置的消息，
      # 可以取值为latest（从最新的消息开始消费）,earliest（从最老的消息开始消费）,none（如果无offset就抛出异常）
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session.timeout.ms: 60000
      # 事务隔离级别
      isolation-level: read_committed #仅读取已提交的消息
    listener:
      log-container-config: false
      #推荐设置为topic的分区数
      concurrency: 5
      # 手动提交
      ack-mode: manual_immediate
kafka:
  topics:
    - name: book
      num-partitions: 3
      replication-factor: 1
    - name: topic2
      num-partitions: 3
      replication-factor: 1
    - name: topic3
      num-partitions: 3
      replication-factor: 1
